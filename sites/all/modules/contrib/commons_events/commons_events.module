<?php
/**
 * @file
 * Drupal Commons Events feature.
 */

include_once 'commons_events.features.inc';

/**
 * Implements hook_menu().
 */
function commons_events_menu() {
  $items = array();
  $items['node/%node/attendees'] = array(
    'title' => 'Attendees',
    'page callback' => 'commons_events_event_attendees_page',
    'page arguments' => array(1),
    'access callback' => 'commons_events_attendee_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function commons_events_menu_alter(&$items) {
  // Hide the "Register" tab since we expose an "Attend" button.
  $items['node/%/register']['access callback'] = FALSE;
}

/**
 * Access callback for showing the Attendees tab.
 */
function commons_events_attendee_access($event_node) {
  if ($event_node->type == 'event') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_views_default_views_alter().
 */
function commons_events_views_default_views_alter(&$views) {
  if (isset($views['commons_bw_all'])) {
    // Events aren't meant to display on the group browswing widget because
    // they have their own landing page.
    $views['commons_bw_all']->display['default']->display_options['filters']['type']['id'] = 'type';
    $views['commons_bw_all']->display['default']->display_options['filters']['type']['table'] = 'node';
    $views['commons_bw_all']->display['default']->display_options['filters']['type']['field'] = 'type';
    $views['commons_bw_all']->display['default']->display_options['filters']['type']['operator'] = 'not in';
    if (!isset($views['commons_bw_all']->display['default']->display_options['filters']['type']['value'])) {
      $views['commons_bw_all']->display['default']->display_options['filters']['type']['value'] = array('event' => 'event');
    }
    else {
      $views['commons_bw_all']->display['default']->display_options['filters']['type']['value']['event'] = 'event';
    }
  }
}

/**
 * Page callback for full event attendee listing.
 */
function commons_events_event_attendees_page($event_node) {
  return theme('commons_events_event_attendees',
    array(
      'event_nid' => $event_node->nid,
      'display' => 'full',
    ));
}

/**
 * Implements hook_theme().
 */
function commons_events_theme($existing, $type, $theme, $path) {
  return array(
    'commons_events_attending_event' => array(
      'variables' => array(
        'event' => NULL,
      ),
      'file' => '/includes/commons_events.theme.inc',
    ),
    'commons_events_event_attendees' => array(
      'variables' => array(
        'display' => NULL,
        'event_nid' => NULL,
      ),
      'file' => '/includes/commons_events.theme.inc',
    ),
  );
}

/**
 * Implements hook_entity_view_alter().
 */
function commons_events_entity_view_alter(&$build, $type) {
  if ($build['#entity_type'] == 'node' && $build['#bundle'] == 'event') {
    $attendee_count = db_select('registration', 'r')
      ->fields('r')
      ->condition('entity_id', $build['#node']->nid)
      ->condition('entity_type', 'node')
      ->countQuery()
      ->execute()
      ->fetchField();
    $build['attendee_count'] = $attendee_count;
    $build['attending'] = array(
      0 => theme('commons_events_attending_event', array('event' => $build['#node'], 'attendee_count' => $attendee_count)),
      '#weight' => -10,
    );
    $vars = array(
      'event_nid' => $build['#node']->nid,
    );
    // Don't show the address if the event location is only online.
    $field_location = field_view_field('node', $build['#node'], 'field_location');
    $field_location = $field_location['#items']['0']['value'];
    if ($field_location == 'online') {
      unset($build['field_address']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter();
 */
function commons_events_form_node_form_alter(&$form, &$form_state) {
  if ($form_state['node']->type == 'event') {
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'commons_events') . '/css/commons_events.css',
    );
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'commons_events') . '/js/commons_events.js',
    );
    // Remove the '-None-' option from all the dropdowns.
    unset($form['field_location'][$form['field_location']['#language']]['#options']['_none']);
    unset($form['field_registration_type'][$form['field_registration_type']['#language']]['#options']['_none']);
    // Hide the Registration type field.
    $form['field_registration']['#type'] = 'hidden';
    // Address field should be hidden if event is only online.
    $form['field_address']['#states'] = array(
      'invisible' => array(
        ':input[name^="field_location"]' => array('value' => 'online'),
      ),
    );
    // Status and attendee limit are shown if registration is onsite.
    $node_registration_status = 1;
    if (isset($form_state['node']->nid)) {
      $settings = registration_entity_settings('node', $form_state['node']->nid);
      $node_registration_status = $settings['status'];
    }
    $form['field_status'] = array(
      '#type' => 'select',
      '#title' => t('Status'),
      '#options' => array(
        1 => t('Open to new attendees'),
        0 => t('Closed'),
      ),
      '#default_value' => $node_registration_status,
      '#states' => array(
        'visible' => array(
          ':input[name^="field_registration_type"]' => array('value' => 'onsite'),
        ),
      ),
      '#weight' => 10,
    );
    $form['field_number_of_attendees']['#states'] = $form['field_status']['#states'];
    $form['field_number_of_attendees']['#states']['visible'][':input[name="field_status"]'] = array(
      'value' => 1,
    );
    $form['field_number_of_attendees']['#weight'] = 11;
    $form['field_topics']['#weight'] = 12;
    // URL field shown if registration is offsite only.
    $form['field_offsite_url']['#states'] = array(
      'visible' => array(
        ':input[name^="field_registration_type"]' => array('value' => 'external'),
      ),
    );
    $form['#validate'] = array_merge(array('commons_events_node_form_validate'), $form['#validate']);
    $form['#submit'][] = 'commons_events_node_form_submit';
    // Move registration settings into a fieldset so we can move the group.
    $form['event_registration_settings'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#title' => t('Registration settings'),
      '#group' => 'additional_settings',
      '#weight' => -10,
    );
    $form['event_registration_settings']['field_registration_type'] = $form['field_registration_type'];
    $form['event_registration_settings']['field_status'] = $form['field_status'];
    $form['event_registration_settings']['field_number_of_attendees'] = $form['field_number_of_attendees'];
    $form['event_topics'] = array(
      '#type' => 'fieldset',
      '#title' => t('Topics'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'additional_settings',
      '#weight' => -9,
    );
    $form['event_topics']['field_topics'] = $form['field_topics'];
    unset($form['field_topics']);
    unset($form['field_registration_type']);
    unset($form['field_status']);
    unset($form['field_number_of_attendees']);
  }
}

/**
 * Implements hook_commons_entity_integration.
 */
function commons_events_commons_entity_integration() {
  return array(
    'node' => array(
      'event' => array(
      ),
    ),
  );
}

/**
 * Custom node form validation handler.
 */
function commons_events_node_form_validate($form, &$form_state) {
  $lng = (isset($form_state['language']) ? $form_state['language'] : LANGUAGE_NONE);
  switch ($form_state['values']['field_registration_type'][$lng]['0']['value']) {
    case 'onsite':
      // Max attendees must be entered if the registration status is open and
      // registration is done onsite.
      if ((int) $form_state['values']['field_status'] == 1
        && (!is_numeric($form_state['values']['field_number_of_attendees'][$lng]['0']['value']))) {
          form_set_error('field_number_of_attendees',
            t('Maximum number of attendees must be set for registrations to be accepted.'));
          return FALSE;
        }
      break;
  }
  return TRUE;
}

/**
 * Custom node form submit handler.
 */
function commons_events_node_form_submit($form, $form_state) {
  $node = $form_state['node'];
  $lng = (isset($form_state['language']) ? $form_state['language'] : LANGUAGE_NONE);
  if (isset($node->nid)) {
    $settings = registration_entity_settings('node', $node->nid);
    $settings['status'] = (int) $form_state['values']['field_status'];
    if ($form_state['values']['field_registration_type'][$lng]['0']['value'] == 'external') {
      $settings['status'] = 0;
    }
    if (!empty($form_state['values']['field_number_of_attendees'][$lng]['0']['value'])
      && is_numeric($form_state['values']['field_number_of_attendees'][$lng]['0']['value'])) {
      $settings['capacity'] = (int) $form_state['values']['field_number_of_attendees'][$lng]['0']['value'];
    }
    $settings['settings'] = serialize($settings['settings']);
    registration_update_entity_settings('node', $node->nid, $settings);
  }
}

/**
 * Implements hook_token_info().
 */
function commons_events_token_info_alter(&$tokens) {
  $tokens['tokens']['node']['attend-form'] = array(
    'name' => t('Attending event form'),
    'description' => t('Displays the appropriate form for attending or cancelling event attendance'),
  );
}

/**
 * Implements hook_commons_bw_create_all_widget().
 */
function commons_events_commons_bw_create_all_widget($group) {
   if (og_user_access('node', $group->nid, 'create event content')) {
      $link = l('List an event','node/add/event',
      array('attributes' => array('class' => 'commons-events-create'), 'query' => array('og_group_ref' => $group->nid))
    );
    return array(
      'commons_events' => array(
        'link' => $link,
        'text' => t('Create in-person or online meetups'),
        '#weight' => 6,
      ),
    );
  }
}

/**
 * Implements hook_tokens().
 */
function commons_events_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    $event = $data['node'];
    foreach ($tokens as $name => $original) {
      if ($name == 'attend-form') {
        $replacements[$original] = theme('commons_events_attending_event', array('event' => $event));
      }
    }
  }
  return $replacements;
}

/**
 * Generates the 'more' link for upcoming events in a specific group.
 */
function commons_events_upcoming_more_link($group_id) {
  if (module_exists('commons_events_solr')) {
    $options = array(
      'query' => array(
        'f[1]' => 'sm_og_group_ref:node:' . $group_id,
      ),
    );
    return l('more', 'events', $options);
  }
  $options = array(
    'query' => array(
      'gid' => $group_id,
    ),
  );
  return l('more', 'events', $options);
}

/**
 * Implements hook_views_post_execute().
 */
function commons_events_views_post_execute(&$view) {
  if ($view->name == 'commons_events_upcoming'
    && $view->current_display == 'panel_pane_1') {
    $view->attachment_after = '<div class="more-link">' . commons_events_upcoming_more_link($view->args[0]) . '</div>';
  }
  else if ($view->name == 'commons_events_upcoming'
    && $view->current_display == 'panel_pane_2') {
    $view->attachment_before = '<div class="commons-event-count">' . format_plural(count($view->result), '1 event', '@count events') . '</div>';
  }
}

/**
 * Implements hook_block_info().
 */
function commons_events_block_info() {
  $blocks = array(
    'commons_events_create_event_link' => array(
      'info' => t('"Create an event" call to action'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'commons_events_anonymous_login' => array(
      'info' => t('"Login to create an event" call to action'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function commons_events_block_view($delta = '') {
  global $user;
  if ($delta == 'commons_events_create_event_link'
    && node_access('create', 'event')) {
    $options = array(
      'query' => array(
        'destination' => 'events',
      ),
    );
    return array(
      'subject' => NULL,
      'content' => l(t('List an event'), 'node/add/event', $options),
    );
  }
  else if ($delta == 'commons_events_anonymous_login'
    && empty($user->uid)) {
    return array(
      'subject' => NULL,
      'content' => t('You must !login first to list an event.', array('!login' => l(t('log in'), 'user'))),
    );
  }
}
